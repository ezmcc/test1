'use strict';

const { isBuiltinType } = require('../base/builtins');
const { transformExpression, applyTransformationsOnNonDictionary } = require('../model/csnUtils');
/**
 *
 * @param {object} member
 */
function checkAnnotationExpression( member, _memberName, _prop, path ) {
  Object.keys(member).filter(pn => pn[0] === '@').forEach((anno) => {
    applyTransformationsOnNonDictionary(member, anno, {
      xpr: (parent, prop, _xpr, xprPath) => {
        transformExpression(parent, prop, {
          ref: (elemref, __prop, ref, refPath) => {
            const { art, scope } = this.csnUtils.inspectRef(refPath);
            if (scope !== '$magic' && art) {
              const ft = this.csnUtils.getFinalTypeInfo(art.type);
              if (!isBuiltinType(ft?.type))
                this.error('odata-anno-xpr-ref', refPath, { anno, elemref, '#': 'flatten_builtin_type' });
            }
          },
        }, xprPath);
      },
    }, {}, path);
  });
}

module.exports = {
  checkAnnotationExpression,
};
